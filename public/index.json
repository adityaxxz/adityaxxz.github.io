
[{"content":"","date":"1 May 2025","externalUrl":null,"permalink":"/","section":"0xAdra","summary":"","title":"0xAdra","type":"page"},{"content":"","date":"1 May 2025","externalUrl":null,"permalink":"/blogs/","section":"Blogs","summary":"","title":"Blogs","type":"blogs"},{"content":" No one is going to beat you at being you. Find what that feels like—play to you but looks like work to others. So that you\u0026rsquo;re going to outcompete them because you\u0026rsquo;re doing it effortlessly; you\u0026rsquo;re doing it for fun.\nThe more you do things that are natural to you, the less competition you have. Escape competition through authenticity, by being your own self.\nTo be successful in two words — productize yourself.\nMuch better to treat this like a search function: find the work you want to do, or the place you want to be at, and the best time to figure this out is right now.\nTry to focus on the overarching problem and try to solve that problem. If you want to be successful, define success very concretely and focus on that. In everything else, when you tend to see your mind, it becomes a problem.\nYou have one life, don\u0026rsquo;t settle for mediocrity.\nThe only true test of intelligence is if you get what you want out of your life, and there are two parts to that —\nOne is getting what you want, so you know how to get it. Second, wanting the right thing—knowing what to want in the first place. Use secretary theorem (read about it) to pick stuff in life. Optimal time is about ⅓ or 37%.\nThe interesting thing about the secretary problem is that it\u0026rsquo;s not time-based. It\u0026rsquo;s not based on ⅓ of the time; it\u0026rsquo;s iteration-based (analogy: the number of candidates or number of shots you took on goal). Malcolm Gladwell popularized this idea of 10,000 hours to mastery — but I think it\u0026rsquo;s 10,000 (not actually, but some unknown number) iterations to mastery. It\u0026rsquo;s about the number of iterations that drives a learning curve.\nIterations are not repetitions. Repetition is about repeating a thing over and over.\nIteration is modifying it with a learning and doing another version of it. So that\u0026rsquo;s error correction. So if you’ll get 10,000 error corrections in anything, you\u0026rsquo;ll be an expert at it.\n","date":"1 May 2025","externalUrl":null,"permalink":"/blogs/philosophy-101/","section":"Blogs","summary":"No one is going to beat you at being you.","title":"philosophy 101","type":"blogs"},{"content":"\rWhat\u0026rsquo;s MEV? #\rIt\u0026rsquo;s the value that blockchain node operators and users can extract by ordering transactions in a block in a specific order.\nWhen a transaction is initiated, it is directed to a specific node which, instead of immediately integrating it into its block, places it into its \u0026lsquo;memory pool\u0026rsquo;, or \u0026lsquo;mempool\u0026rsquo; {waiting area for transactions}. This constitutes the lower tier of workings that enable blockchain.\nSuppose you\u0026rsquo;re a malicious user and want to use this to your advantage. You have the ability to scan the mempool, essentially predicting future transactions. Example #\rLet\u0026rsquo;s say User A is malicious, and sees someone make a transaction that is going to make them $100.\nWell User A might just say \u0026ldquo;Hey! I want to make $100!\u0026rdquo;\nSo what User A can do is something called front-running. They can send their own transaction ahead of your transaction to extract some value. The only reason they are able to extract this value is because they were able to see your transaction ahead of time.\nFront-running is one of the most common forms of MEV. Types #\rArbitrage #\rWe have a price on Uniswap for BTC/USDT , so selling BTC for USDT. we can have the same pool , the same price BTC to dollar with the BTC to USDT pool.\nLets say , User A buys 10 BTC from the first pool, now the price will increase. this means we will have different prices for BTC to USDT.\nHere, MEV bot an arbitrager comes in and rebalances the pool, he will do some swap or use flashloan, and the prices will become roughly the same.\nSandwich Attacks #\rWhere the attacker front-runs the user and then back-runs the user where basically they see the transaction by the user and then they step in. (in this order)\nAttacker Txn (front-run) User Txn Attacker Txn (back-run) ThunderLoan MEV example :\nUser A makes a request to the Thunderloan protocol for a flash loan. Seeing the incoming flash loan request, User B, decides to exploit the situation. User B doesn\u0026rsquo;t just want the fee to be high, they want it way higher! User B then front runs the flash loan function, and spikes the price on Uniswap by taking out a flash loan themselves to make the price go higher. Effectively, this swap alters the balances from the initial ten USDC and one ETH to highly skewed figures: perhaps 0.1 ETH and an astronomical amount of USDC (let\u0026rsquo;s say a billion). Since the fee is derived from the T-Swap pool, the Thunder Loan platform now has a way bigger fee, that the user wasn\u0026rsquo;t aware of. Then, after collecting the fee, User B swaps back to the original ratio of 10 USDC and 1 ETH. Liquidations #\rJIT (Just in time liquidity) #\rThis is an attack, its part of Uniswap V3 where in V3 we have fragmented liquidity, so you have price ticks or price buckets.\nLet\u0026rsquo;s say Tether price is $2000, when the price shoots up and somebody does a swap. this liquidity that you provided at this exact price will be used up, but somebody with an MEV bot with an off-chain monitoring system can actually see that somebody is about to do a swap.\nThe MEV bot can front-run this transaction and provide liquidity for this exact price point , this will make it so that their liquidity will be used before yours. but the fees that the LPs will split between MEV and you.\nMEV Prevention #\rUsing Protection #\rInitializing a bool state variable value as False and set it to True in an ending transaction function, Then if the state variable value is True inside the main function, revert(). Consider Private Mempool #\rInstead of submitting your transaction to a public mempool, you can send your transaction to this private mempool. Unlike the public mempool, this keeps the transaction for itself until it\u0026rsquo;s time to post it on the chain \u0026amp; uses flashbots. Despite its pros, the private mempool requires you to trust that it will maintain your privacy and avoid front-running. Another downside is the slower transaction speed. Constructing an MEV bouncer contract #\rTo save user from getting MEV\u0026rsquo;ed? (Not Applicable but still)\nBut this wont work because the MEV bot (inside the mempool) can see in the bytecode when a contract calls another contract , so the bot just skips the line \u0026amp; call the other contract directly.\n// SPDX-License-Identifier: MIT pragma solidity 0.8.20; interface IFrontRan { function withdraw(string memory password) external; } contract Bouncer { error Bouncer__NotOwner(); error Bouncer__DidntMoney(); address s_owner; address s_frontRan; constructor(address frontRan) payable { s_owner = msg.sender; s_frontRan = frontRan; } function go(string memory password) external { if (msg.sender != s_owner) { revert Bouncer__NotOwner(); } IFrontRan(s_frontRan).withdraw(password); (bool success,) = payable(s_owner).call{value: address(this).balance}(\u0026#34;\u0026#34;); if (!success) { revert Bouncer__DidntMoney(); } } receive() external payable {} } ","date":"23 April 2025","externalUrl":null,"permalink":"/blogs/mev/","section":"Blogs","summary":"What\u0026rsquo;s MEV?","title":"MEV (Maximum Extractable Value)","type":"blogs"},{"content":"\rPerpetuals Mission #1 #\rPerpetuals are essentially just a way for a trader to bet on the price of a certain index token without actually buying the token while enabling the trader to employ leverage. Why perpetuals? #\rPerpetual are named as such because a trader can keep their \u0026ldquo;perpetual\u0026rdquo; position open for as long as they\u0026rsquo;d like, or in perpetuity.\nSo What\u0026rsquo;s a position? #\rThe entire protocol revolves around •positions\u0026quot; that belong to traders, a position is made up of the following:\nSize - This is how much “virtual” capital a trader is commanding. the size of a BTC perpetual position might be 1.5 BTC. If the price of BTC goes up, the trader is able to realize the profits earned on the 1.5 BTC in their position. Collateral - An amount of assets used to \u0026ldquo;back\u0026rdquo; a trader\u0026rsquo;s position, when trader\u0026rsquo;s lose money, their losses come out Of the collateral. If the amount of collateral is deemed insufficient for the size of a position, the position is liquidated or force closed. The size / collateral is the leverage of a position. E.g. if I open a position with $10,000 of USDC as collateral and a size of $20,000 of BTC, my leverage is 2x. Long/Short #\rThere are 2 different directions a perpetual position can take. Long → The trader profits when the price of the index token goes up, and loses when the price of the index token goes down. Short → The trader profits when the price of the index token goes down, and loses when the price of the index token goes up. Traders #\rTraders are the actors opening perpetual positions and betting on the price of the index token. Traders profit when the price of the index token moves in the direction they predict, and lose when it moves in the direction opposite to what they predict. Traders must provide collateral for their position, the collateral is used to cover their losses in the event that price moves in the opposite direction of what they predicted. Liquidity Providers #\rLiquidity providers take the opposite side of Traders. they stand to profit when traders lose money or are liquidated. LPs also often collect fees from the trader, such as opening and closing fees, or borrowing fees. Liquidity providers provide the assets that are used to pay out profit for traders. When a trader profits they get tokens from the LP. When a trader loses, they pay tokens to the liquidity providers out of their position\u0026rsquo;s collateral. Open Interest #\rOpen interest is the measure of the aggregate size of all positions. Trader A $50,000 Long , Trader B $25,000 Long = $75,000 Trader C $60,000 Short = $60,000 → tot is $135,000 net net amt just measures what is the net aggregate amt that has been loaned out by LPs (what amount has been borrowed in general). Liquidity Reserves #\rLiquidity reserves are necessary such that at all times there are enough assets in the liquidity pool (provided by liquidity providers) to pay out the profits for positions.\nIf there is only 10 USDC of liquidity deposit ed by liquidity providers, then allowing a trader to open a perpetual contract with $10,000 of size would be irresponsible. If the price moves even a little bit in the trader’s direction they will be more than $10 in profit, yet there will not be enough USDC to pay them out.\nLiquidity reserve restrictions may be somewhat arbitrary, similarly to the configured liquidation threshold. Here’s a reasonable formula to follow:\nTo be more accurate, we can account for the differences in longs/shorts.\nShorts can never profit more than the original size of the position, therefore the short OpenInterest is the maximum possible amount paid out to shorts. Longs however can increase in profit without bound, so we can account for the current valuation of total long positions.\nOnce a liquidity reserve validation such as the ones above have been implemented, trader’s cannot open positions past what is reasonably supported by the deposited liquidity and depositors cannot withdraw liquidity that is crucial for backing existing positions.\nPerpetuals Mission #2 #\rDecreasing a position #\rDecrease size #\rSimilarly to increasing the size of a position, traders have the ability to decrease the size of their position, this includes closing their position (decreasing the size to 0).\nHowever, decreasing a position is slightly more involved, we need to consider the PnL of the trader’s position when we are decreasing it.\nIf we don’t account for a trader’s PnL and allow them to decrease their size, they could manipulate their PnL and avoid paying losses! Additionally, decreasing the PnL this way reduces the probability that a trader will unexpectedly change the leverage of their remaining position drastically.\nSo we implement the following calculation when decreasing a position:\nrealizedPnL = totalPositionPnL • sizeDecrease / positionSize The realizedPnL is deducted from the position’s collateral if it is a loss, and paid out to the trader in the collateralToken if it is a profit.\nThis way, if a trader decreases their position’s size by 50%, they realize 50% of their PnL.\nAnd if a trader closes their position (e.g. decreases by 100% of the size), they realize 100% of their PnL.\n💡 If a trader decreases the size of their position to 0, the position should be closed and the remaining collateral (after fees and losses) should be sent back to the trader. Example of decreasing a position’s size with positive PnL (trader is in profit):\nBob opened his position when the index token price was $100, now the index token price is $110. Bob’s position has a size of 100 USD, sizeInTokens of 1, collateral of 50 USDC, and a current PnL of 10 USD — he’s up 10%! Bob decides to decrease his position size by 50 USD, e.g. 50% of his position. Therefore Bob realizes 50 / 100, 50% of his pending PnL realizedPnl = totalPnl * sizeDecrease / positionSize = 10 * 50 / 100 = 5 USD Bob receives 5 USDC for the 50% of the PnL he realized. This is paid from the LPs. Bob’s position now has a size of 50 USD, sizeInTokens of 0.5, collateral of 50 USDC, and a current PnL of 5 USD — he’s still up 10% on his remaining position. Example of decreasing a position’s size with negative PnL (trader is in loss):\nBob opened his position when the index token price was $100, now the index token price is $90. Bob’s position has a size of 100 USD, sizeInTokens of 1, collateral of 50 USDC, and a current PnL of -10 USD — he’s down 10%! Bob decides to decrease his position size by 50 USD, e.g. 50% of his position. Therefore Bob realizes 50 / 100, 50% of his pending PnL realizedPnl = totalPnl * sizeDecrease / positionSize = -10 * 50 / 100 = -5 USD Bob pays 5 USDC for the 50% of the PnL he realized. This is paid from his collateral. Bob’s position now has a size of 50 USD, sizeInTokens of 0.5, collateral of 45 USDC, and a current PnL of -5 USD — he’s still down 10% on his remaining position. Decrease collateral #\rJust as trader’s are allowed to increase the collateral of their position, they should be allowed to decrease the collateral of their position.\nIf a trader has a position with 100 USDC as collateral, and chooses to remove 10 USDC from their collateral, they will receive 10 USDC and their position will be updated to have 90 USDC of collateral.\n💡 Traders may choose to decrease just the size of their position, just the collateral of their position, or both at the same time. Liquidation #\rWhat makes a position liquidatable?\nA position becomes liquidatable when it’s collateral is deemed insufficient to support the size of position that is open.\nFor our implementations we will use a leverage check to define whether a position is liquidatable or not:\nleverage = size / collateral Leverage is simply the ratio of the position’s size to the position’s collateral. For our protocol we will use an arbitrary maxLeverage which can be configured. The maxLeverage will be the cutoff point for the maximum leverage a position can have before it is considered liquidatable.\nYou might use 20x as a value for maxLeverage in your tests.\n💡 Be sure that traders can never modify their position and leave the position’s leverage over the maxLeverage (e.g. the position is liquidatable). What occurs during liquidation?\nDuring liquidation, a position is force closed so that the protocol can remain solvent.\nThe following occurs:\nA position is force closed, e.g. size is decreased by 100%. Pending unrealized losses from PnL are paid from the position’s collateral. Fees such as the positionFee for closing 100% of the size are applied, as well as outstanding borrowingFees. A liquidatorFee is taken from the position’s remaining collateral and paid to the msg.sender who is invoking the liquidate function. It is up to you whether the liquidatorFee is a percentage of the remaining collateral or the position’s size, you should have a reasoning for your decision documented in the README.md. Any remaining collateral for the position is sent back to the user. 💡 There are several potential edge cases surrounding liquidation: What if the position is being liquidated while in profit? What if the position does not have enough collateral to cover it’s losses/fees? What if a position is left with insufficient collateral to cover the liquidatorFee? These are often edge cases that cause bugs and vulnerabilities in any DeFi protocol that involves liquidation (not limited to perpetuals). It is up to you to decide the best way to handle these edge cases.\nHow do liquidations happen?\nLiquidations occur when any position has surpassed the maxLeverage threshold and any arbitrary address calls the liquidate function specifying that particular position to liquidate.\nArbitrary actors are incentivized to initiate the liquidation as they are awarded the liquidatorFee for successfully liquidating a position.\nYou might have a positionId for positions, or position’s may identifiable based upon the trader’s address and the direction of the trade, or there may be some other mechanism for identifying positions. The caller of the liquidate function should simply be able to specify a position to liquidate.\n💡 Positions that are within the maxLeverage threshold should _not_ be liquidatable, calls to the liquidate function for these positions should revert. Fees #\rPosition Fees — Optional/Bonus\nA positionFee is applied when a position is increased or decreased, and is proportional to the amount of size that is increased or decreased.\nThe positionFee goes towards liquidity providers, this is one incentive for users to provide liquidity to the system.\nThe positionFee should be configurable by the owner, or trusted address — but bounded between the range of 0 to 200 basis points.\nExample positionFee on increase:\nThe positionFee is configured to 100 basis points. A trader opens a position with a size of 100 USD and 50 USDC for collateral. positionFee = sizeDelta * 100 / 10_000 = 100 USD * 1% = 1 USD The positionFee of 1 USD is subtracted from the collateral of the position and given to liquidity providers. The resulting position has a size of 100 USD and 49 USDC for collateral. The trader increases their position size by 50 USD. positionFee = sizeDelta * 100 / 10_000 = 50 USD * 1% = 0.5 USD The positionFee of 0.5 USD is subtracted from the collateral of the position and given to liquidity providers. The resulting position has a size of 150 USD and 48.5 USDC for collateral. Example positionFee on decrease:\nThe positionFee is configured to 100 basis points. A trader has a position with a size of 100 USD and 50 USDC for collateral, the trader’s position has a break-even PnL of 0 (the trader has neither gained nor lost any money, e.g. the index token price is the same as when the trader opened their position). The trader decreases their position size by 25 USDC. positionFee = sizeDelta * 100 / 10_000 = 25 USD * 1% = 0.25 USD The positionFee of 0.25 USD is subtracted from the collateral of the position and given to liquidity providers. The resulting position has a size of 75 USD and 49.75 USDC for collateral. The trader decreases their position size by 75 USDC. positionFee = sizeDelta * 100 / 10_000 = 75 USD * 1% = 0.75 USD The positionFee of 0.75 USD is subtracted from the collateral of the position and given to liquidity providers. The position is closed and the trader receives the remaining 49 USDC from their collateral. 💡 100 basis points = 1% Borrowing Fees #\rBorrowing fees accrue over time in correspondence with the size of a position. The larger size a position has, the faster it’s borrowing fees will accrue. You can think of borrowing fees as a fee that the liquidity providers charge for the trader to “rent” reserved liquidity with their position.\nLarger position’s will reserve more liquidity and so will accrue more borrowing fees.\nBorrowing fees lend themselves nicely to a perSizePerSecond fee, e.g. the protocol defines a fee that accumulates per unit of size per second.\nWe will compute borrowing fees according to the following formula:\nborrowingFees = positionSize * secondsSincePositionUpdated * borrowingPerSharePerSecond We’ll define a reasonable borrowingPerSharePerSecond as one that allows for ≤ 10% of a position’s size to be charged over the course of a year. Given 31_536_000 seconds in a year this yields the following upper bound for the borrowingPerSharePerSecond.\nTo apply the borrowingPerSharePerSecond you’ll have to consider decimals, be sure your USD representation holds enough precision to avoid significant precision loss.\nHere’s an example of how you might translate the above equation into solidity, accounting for decimals if your USD representation has 30 decimals of precision:\npositionSize = 10_000 * 1e30 secondsSincePositionUpdated = 31_536_000 borrowingPerSharePerSecond = 1e30 / 315_360_000 = 3170979198376458650431 (~3.17e21) 💡 Borrowing fees should be updated and paid every time a user modifies their position, or when a position is liquidated. All fees including borrowing fees should be taken into account when determining if a position is liquidatable.\nLiquidation Fees #\rLiquidation fees are intended to incentivize arbitrary addresses to maintain solvency for the protocol by liquidating positions as soon as they enter a liquidatable state. If position’s are not swiftly liquidated, they can take on more losses than the collateral can cover and end up insufficiently compensating LPs, or worse… causing unexpected bugs in the protocol.\nA liquidatorFee is subtracted from the remaining collateral and sent to the msg.sender who invokes the liquidate function. It is up to you whether the liquidatorFee is a percentage of the remaining collateral or the position’s size, you should have a reasoning for your decision documented in the README.md.\nYou must also take into consideration the edge case where the remaining collateral for a liquidation is insufficient to cover the liquidationFee, this may affect your decision for the liquidatorFee. Document how this edge case is handled in the README.md.\n","date":"17 April 2025","externalUrl":null,"permalink":"/blogs/perpetuals/","section":"Blogs","summary":"Perpetuals Mission #1 #\rPerpetuals are essentially just a way for a trader to bet on the price of a certain index token without actually buying the token while enabling the trader to employ leverage.","title":"Perpetuals","type":"blogs"},{"content":"Author : Brianna Wiest\nBook Link : The Pivot Year\nMy learnings from the book #\rDay 1 : Not to build a clean one-line story but to create a mosaic of experience — ever-forming, ever-evolving, ever-unfolding as whats within unravels into reality revealing at last the fragment of the universe that came to be known through you at this exact time.\nDay 2 : The Golden Vortex — the space between everything you know you\u0026rsquo;re meant for and anything you had previously imagined to be.\nDay 3 : Happiness is not something that comes to you when every problem is solved and all things are perfectly in place, but in the shining silver linings that remind us the light of the day is always there if you slow down enough to notice.\nDay 4 : Self-Protection is learning how to take a pause between what you feel and how you react. Practice this pause.\nDay 5 : There are two rivers running through us at all times, one that carries all the voices of the world, and the other , a single voice stands alone - the voice of our inner guide. Our lives begin the day we choose to follow our inner knowing, the first realization of wisdom is the recognition that there is truth fragmented everywhere. At last, the journey is not about the abandoning one in favor of the other, but knowing when it is time to listen, and to follow each.\nDay 6 : Desire is a projection outward that is proportionate to potential inward. What you are waiting on is your own willingness to accept the mountain you must climb in order to pull those desires out of the deepest parts of you and create them in the world you already inhabit.\nDay 7 : Stop trying to be good at hundred things and finally choose the one that asks you to risk, to lay your heart bare, to try again, even though you\u0026rsquo;re scared. You\u0026rsquo;re not failing coz you\u0026rsquo;re not motivated, maybe you\u0026rsquo;re not supposed to get far on a path that was never yours to walk.\nDay 8 : Living life is really just knowing how to take care of yourself, how to make home within your own skin, it\u0026rsquo;s learning how to build a simple life you are proud of. Little by little, you begins to see that life can only grow outward in proportion to how stable it is inward - That if the joy is not in the little things first,The big things wont fully find us.\nDay 9 : Whatever pain you think you are in right now cannot begin to compare to the peace that will one day come over here.\nDay 10 : The journey is not how you place down what\u0026rsquo;s being on you, but how you learn to stop picking it up.\nDay 11: Not every phase of your life will tell the same story, Our greatest dreams and our deepest fears make coexist, and the existence of one does not negate or lessen the other, that every movement that you honour where you are with complete surrender you open to the next experience live wants to offer.\nDay 12: Release yourself into the Dreamscape and follow your hearts deepest calling, as it is leading you to the actions that will continue to weave your life into the story of humanity.\nDay 13: You tell life what you want, and life tells you how to get it. when you ask for a big life you cannot keep fighting for a smaller one to stay.\nDay 14:\nDay 15:\nDay 16:\nDay 17:\nDay 18:\nDay 19:\nDay 20:\nDay 21:\nDay 22:\nDay 23:\nDay 24:\nDay 25:\nDay 26:\nDay 27:\nDay 28:\nDay 29:\nDay 30:\nDay 31:\nDay 32:\nDay 33:\nDay 34:\nDay 35:\nDay 36:\nDay 37:\nDay 38:\nDay 39:\nDay 40:\nDay 41:\nDay 42:\nDay 43:\nDay 44:\nDay 45:\nDay 46:\nDay 47:\nDay 48:\nDay 49:\nDay 50:\nDay 51:\nDay 52:\nDay 53:\nDay 54:\nDay 55:\nDay 56:\nDay 57:\nDay 58:\nDay 59:\nDay 60:\nDay 61:\nDay 62:\nDay 63:\nDay 64:\nDay 65:\nDay 66:\nDay 67:\nDay 68:\nDay 69:\nDay 70:\nDay 71:\nDay 72:\nDay 73:\nDay 74:\nDay 75:\nDay 76:\nDay 77:\nDay 78:\nDay 79:\nDay 80:\nDay 81:\nDay 82:\nDay 83:\nDay 84:\nDay 85:\nDay 86:\nDay 87:\nDay 88:\nDay 89:\nDay 90:\nDay 91:\nDay 92:\nDay 93:\nDay 94:\nDay 95:\nDay 96:\nDay 97:\nDay 98:\nDay 99:\nDay 100:\n","date":"15 November 2024","externalUrl":null,"permalink":"/blogs/the-pivot-year/","section":"Blogs","summary":"Author : Brianna Wiest","title":"The Pivot Year","type":"blogs"},{"content":"\r\u0026ldquo;If you find my projects useful, a star ⭐ would be fantastic.\u0026rdquo;\n1️⃣ Tweet App #\radityaxxz/Tweet-App\rtweet app using django, postgres backend\rPython 0\r0\r2️⃣ Youtube Backend #\radityaxxz/yt-backend\rbackend for video streaming app like yt using nodejs, express, mongodb\rJavaScript 0\r0\r3️⃣ Account Abstraction #\radityaxxz/account-abstraction\rMinimal Account Abstraction implementation on Ethereum \u0026amp; ZKSync\rSolidity 1\r0\r4️⃣ Stablecoin DeFi Project #\radityaxxz/stablecoin-defi-project\rSolidity 1\r0\r5️⃣ Running Tracker App #\radityaxxz/RunningTrackerApp\rKotlin 0\r0\r5️⃣ Multi-Threaded Web Server #\radityaxxz/multithreaded-web-server\rBuilt a Multithreaded Web Server using Rust🦀\rRust 0\r0\r6️⃣ CryptoTracer #\rVisit the addy🔗 or test🔗 branch to see my commits!\nabhinavjain1110/CryptoTracer\rJavaScript 2\r3\r","date":"4 August 2024","externalUrl":null,"permalink":"/projects/","section":"0xAdra","summary":"\u0026ldquo;If you find my projects useful, a star ⭐ would be fantastic.","title":"","type":"page"},{"content":"Author : Steven Pressfield\nBook Link : The War of Art: Break Through the Blocks and Win Your Inner Creative Battles\nMy learnings from the book #\rMost of us have two lives. the life we live, and the unlived life within us. Between the two stands resistance.\nWhat\u0026rsquo;s resistance ? Late at night have you experienced a vision of the person you might become, the work you could accomplish, the realized being you were meant to be? Are you a writer who doesn\u0026rsquo;t write, a painter who doesn\u0026rsquo;t paint, an entrepreneur who never starts a venture? Then you know what Resistance is.\nIf you believe in God (and I do) you must declare Resistance evil, for it prevents us from achieving the life God intended when He endowed each of us with our own unique genius.(One of the great lines)\nLook in your own heart. Unless I\u0026rsquo;m crazy, right now a still small voice is piping up, telling you as it has ten thousand times, the calling that is yours and yours alone. You know it. No one has to tell you. And you\u0026rsquo;re no closer to taking action on it than you were yesterday or will be tomorrow. You think Resistance isn\u0026rsquo;t real? Resistance will bury you.\nResistance is not a peripheral opponent. Resistance arises from within. It is self-generated and self-perpetuated. Resistance is the enemy within.\nProcrastination is the most common manifestation of resistance because its the easiest to rationalize.\n","date":"4 August 2024","externalUrl":null,"permalink":"/blogs/the-war-of-art/","section":"Blogs","summary":"Author : Steven Pressfield","title":"The War of Art","type":"blogs"},{"content":" An independent security researcher \u0026 developer auditing smart contracts for a living... Things I believe Form is everything Excess in moderation Think less Always instinct AI will be transformative, soon, and it may not go well Choosing to care about silly things (especially communities) is important Strength before weakness Things gonna be more challenging Quotes I Like \u0026ldquo;True creation requires sacrifice\u0026rdquo; \u0026ldquo;Fear of loss is the path to dark side\u0026rdquo; \u0026ldquo;It\u0026rsquo;s not who I am underneath, but what I do that defines me\u0026rdquo; \u0026ldquo;Given enough eyeballs, all bugs are shallow\u0026rdquo; ","date":"4 August 2024","externalUrl":null,"permalink":"/about/","section":"0xAdra","summary":"An independent security researcher \u0026 developer auditing smart contracts for a living.","title":"About","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]